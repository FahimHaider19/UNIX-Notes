Unix Tutorial 1


Getting Home: cd ~ Getting to root: cd /
Present directory/Get full path name of director: pwd OR echo ~ Clearing history: history -c
Change directory to parent of home: cd ~/.. Show Hidden Files: Ls -a
Display File Type: file file1 List hidden files: ls -la / ls -al
List all files available (excluding hidden): ls -l

Tip: presence of “d” indicates that it is a directory. Lack thereof, means its a file.
Going up 2 steps: cd ../.. “Escape”: \\
Access manual for a command: man command name (eg: man ls)

Escape out of that file using (Shift + Q)
Creating a file (7 different methods, each by default txt unless specified otherwise): touch f1 Copying a file: cp [options] [file] [destination] eg: cp f1 sub1
Copying a file with a pattern: cp f[0-9] sub1
Recursive option: -R -> repeats a particular command over an entire directory Copying a directory to another directory: cp -R sub1 ~/home/aks
Copying a directory from another place to current position: cp -R [target directory’s absolute path] .
Deleting everything with a particular pattern from current position: rm -rf sub[1-8]
Remove a file: rm

 
Recursive + stop extra functions: -rf

Copy all files from one directory to another: Use absolute_path/*
Achieved by leaving space blank after / and .
Moving a directory/file: mv [file path of directory to be moved] [target destination] Can also be used to RENAME filename: mv longfilename123 file12
Moving has inbuilt recursive properties and does not need -R
Print statements: echo
Echo with ‘ ‘ -> excludes wild cards Echo with “ “ -> prints as it is
Echo statement to a file: >
Eg: echo “hello world” > samplefile
Create a variable regularly as other programming languages: n=4 Printing a variable: echo $n
Doing mathematical operations with echo: Using (( )) eg: echo $((4+3)) Removing/Deleting a variable: unset [variable name] eg: unset n
Open a particular shell-scripting file: vim/nano only for server side scripting, not necessary for interactive surface like Ed.




RegEx in Unix

Digits: [0-9]
Lowercase alphabets: [a-z] Hook/Wildcard match: ?
(Copies even if there is no character after first character eg: f)
Using echo to print onto next line: $1 $’\n’




Reset History: history -c
 
Unix Tutorial 2:
 
Numerical representation of file permissions: r = 4 w = 2 x = 1 Changing permission in a non-numeric way: chmod u+x, g-w, o-r f1
(Adding executable for user, removing write for group, and removing all for others.) Changing permission in digital or numeric way: chmod 740 f2
Changing permission for all permissions: chmod a-rwx f4 / chmod 000 f5 To escape from a VIM/NANO script:	ESCAPE + :wq + Enter
-n in script removes the “next line” in entering a value from keyboard, “\n”
$0 represents the name of the script or the first argument.
Other Shell Variables:







Output contents of the file/View file: cat test.txt
Sort contents of a file: sort test.txt (alphabetical for word data) / sort -unr (descending order) Output line, words, and bytes in a file: wc test.txt
Output first ‘x’ lines or last ‘x’ lines of a file: head -x test.txt / tail -x test.txt Export command makes a variable available to other scripts & bash instances. Starting a new xterm instance / bash instance: xterm &
Store output of a command into a variable using ` ` : lsoutput (variable name)= `ls -l`








 
Overview of Permissions:




Sample Scripts:

Basic IF/ELSE
1.	Name checking welcome program #!/bin/bash
#Enter a name from STDIN #check if name is Aks
#If name is Aks, print welcome and the name else print goodbye
echo -n "Name: " read name
if [ $name == "Aks" ] then
echo "Hello & welcome $name" else
echo "Goodbye"
fi
2.	Grade checking + display #!/bin/bash
#read student name from STDIN
#capture the mark of the student from argument
#determine and show the grade based on the mark received
echo -n "Name: " read name mark=$1
if [ $mark -ge 85 ] then
grade="HD"

 
elif (($mark >= 75)) then
grade="D" elif (($mark >= 65)) then
grade="C" elif (($mark >= 50)) then
 
else fi
 
grade="P" grade="Z"
 
echo "$name mark is $mark and grade is $grade”
Loops
1.	Calculate and display power of entered value using FOR loop #!/bin/bash
#read a value n from STDIN #display the power(2) series of n
echo -n "Number: " read n
for ((i=0;i<=$n;i++)) do
 

done
 
pow=$(($i*$i))
echo "$i --> $pow"
 

2.	Count for number of vowels with STDIN using WHILE loop #!/bin/bash
#read characters until .
#show the total number of vowels lower-case
echo -n "Character: " read c
counter=0
while [ $c != "." ] do
if [[ $c == [aeiou] ]] then
((counter++))
fi
 

done
 
echo -n "Character: " read c
 
echo "Vowel count = $counter"



Unix Tutorial 3:
Piping feeds output of one into the input of other. Runs simultaneously not parallel. ( | )ß 3 channels/streams: STDIN 0
STDOUT 1
STDERR 2
Redirecting is another way of creating files: > cat animals.txt > mammals.txt
Repeating the command causes it to overwrite the file. Append one file to another: >>
cat animals.txt >> mammals.txt
Redirect STDIN to file and STDERR to another file:
cat * out.txt 2> error.txt
2>&1: redirect stderr to stdout.
Line numbering: ls -l | nl (output of the first command is used as input for the next) Results of ls -l are numbered.
Ls -l | nl > out.txt (To store the output in a text file)
Ls -l | tail -n+2 > out.txt (Gets all lines from the end n lines, upto the second line) Similarly, ls -l | tail -n+1 > out.txt (from the first line till the end.)
Retrieving only specific columns from an output:
Cat out.txt | cut -d “ “ -f 1,3
Where cut is the command used, -d is delimiter, and -f are the fields that we are retrieving.
This however, determines the columns based on blank spaces in between which could result in some columns being left out. Alternatively,
cat out.txt | awk ‘{print $1 $3 $5}’
AWK to include SPACES: cat out.txt | awk ‘{print $1 “ “ $3 “ “ $5}’
Format AWK so that it is printed including digit spaces: cat out.txt | awk '{printf "%s %s %4d \n",
$1, $3, $5}'
Access to running processes in the machine: top / ps aux To remove duplicates: uniq f1 / unique -I f1 (case sensitivity) Alternatively: sort -uf f1



 
Paste animals.txt mammals.txt -> takes data from both files and displays the columns next to each other.
Paste -d “-“ animals.txt mammals.txt
Tee -> redirects data into a file using | and also prints it to standard output. Cat animals.txt | tee out.txt
Arrays

Script to run array length, elements of an array using for, while and for each

#!/bin/bash
array=(2 hi 3.5 bye 44) #creating an array length=${#array[@]} #calculate length of array echo "Array length = $length" for((i=0;i<$length;i++))
do
echo "Items[$i] = ${array[$i]}" done

j=0

while [[ $j -lt $length ]] do
echo "${array[$j]}" ((j++))
done

for e in ${array[@]} do
echo "$e" done

















 
Adding up even numbers in a sequential array and producing the sum

#!/bin/bash

number=($(seq 1 3 10)) #creating an array using seq from 1-50 incremented by 3. echo "Sequential array: ${number[@]}"
#calculate and display the even sum length=${#number[@]}

sum=0
for n in ${number[@]} do
if [ $(($n%2)) == 0 ] then sum=$(($sum+$n)) fi

done
echo "Even sum is = $sum"


Creating a dynamic array and printing it

#!/bin/bash
#create a dynamic array of size n from argument

n=$1 nums=()

i=0
while [[ $i -lt $n ]] do
 




done
 
echo -n "Value:" read val nums[$i]=$val ((i++))
 

echo "Array is: ${nums[@]}”

Creating script to read files and display the lines

#!/bin/bash
#read file name using cat
##file name is the first arguement of the script

filename=$1
for line in `cat $filename` do
echo "$line"
done




 
Reading a file line by line using IFS

While IFS= read -r line;do echo $line
done < “$1”



